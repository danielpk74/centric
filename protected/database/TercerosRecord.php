<?php

/**
 * Auto generated by prado-cli.php on 2011-03-04 06:57:00.
 */
class TercerosRecord extends TActiveRecord {

    const TABLE = 'terceros';

    public $Identificacion;
    public $IdTerceroPertenece;
    public $TpIdentificacion;
    public $DigitoVerificacion;
    public $FhCreacion;
    public $NombreCorto;
    public $NombreExtendido;
    public $Nombre;
    public $Nombre2;
    public $Apellido1;
    public $Apellido2;
    public $Direccion;
    public $Telefono;
    public $Telefono2;
    public $Fax;
    public $Email;
    public $CodigoBarrio;
    public $Contacto;
    public $CargoContacto;
    public $IdFormaPago;
    public $CodCiudad;
    public $Inactivo;
    public $Comentarios;
    public $IdCiudad;
    public static $RELATIONS = array(
        'TerceroPertfunctionenece' => array(self::BELONGS_TO, 'TercerosRecord', 'IdTerceroPertenece'),
        'Ciudades' => array(self::BELONGS_TO, 'CiudadesRecord', 'CodCiudad'),
    );

    public static function finder($className = __CLASS__) {
        return parent::finder($className);
    }

    public static function DistinTerceros() {
        $sql = "SELECT DISTINCT (tercero_empresa.Identificacion), tercero_empresa.NombreCorto, tercero_empresa.Identificacion
                FROM (obligaciones LEFT JOIN terceros AS tercero_moroso ON tercero_moroso.Identificacion = obligaciones.IdTercero) 
                     LEFT JOIN terceros AS tercero_empresa ON tercero_empresa.Identificacion = tercero_moroso.IdTerceroPertenece";

        $Terceros = new TercerosRecord();
        $Terceros = TercerosRecord::finder()->With_Ciudades()->findAllBySql($sql);

        return $Terceros;
    }

    /**
     * Devuelve todos los terceros.
     * @param type $TpBusqueda
     * @param type $IdTercero
     * @return type 
     */
    public static function ObtenerTercero($TpBusqueda, $IdTercero) {
        $arTercero = new TercerosRecord();

        //Identificacion
        if ($TpBusqueda == '1') {
            $arTercero = TercerosRecord::finder()->With_Ciudades()->findBy_Identificacion($IdTercero);
        }

        return $arTercero;
    }

    /**
     * Devuelve todos los terceros.
     * @param type $TpBusqueda
     * @param type $IdTercero
     * @return type 
     */
    public static function ObtenerClientes() {
        $sql = "SELECT Identificacion, NombreCorto, Contacto, Telefono, Fax, Email, Direccion, CodCiudad
                FROM `terceros` 
                WHERE `IdTerceroPertenece` IS NULL";

        $Tercero = new TercerosRecord();
        $Tercero = TercerosRecord::finder()->With_Ciudades()->findAllBySql($sql);

        return $Tercero;
    }

    /**
     * Devuelve un objeto del tipo terceros con todos los morosos
     * @return objeto TercerosRecord
     */
    public static function ObtenerMorosos() {
        $sql = "SELECT Identificacion, NombreCorto, Contacto, Telefono, Fax, Email, Direccion,CodCiudad
                FROM `terceros` 
                WHERE `IdTerceroPertenece` IS NOT NULL";

        $Tercero = new TercerosRecord();
        $Tercero = TercerosRecord::finder()->With_Ciudades()->findAllBySql($sql);

        return $Tercero;
    }
    
    /**
     * Devuelve un objeto del tipo terceros con todos los morosos de un tercero especificado por parametro
     * @return objeto TercerosRecord
     */
    public static function ObtenerMorososTercero($IdTercero) {
        $sql = "SELECT Identificacion, NombreCorto, Contacto, Telefono, Fax, Email, Direccion,CodCiudad
                FROM `terceros` 
                WHERE `IdTerceroPertenece`=$IdTercero
                ORDER BY NombreCorto ";

        $Tercero = new TercerosRecord();
        $Tercero = TercerosRecord::finder()->With_Ciudades()->findAllBySql($sql);

        return $Tercero;
    }

    /**
     * Obtiene los datos de un tercero buscado por nombre o por 
     * apellidos
     * @param type $Nombre 
     * @return <objeto> del tipo TercerosRecord
     * */
    public static function ObtenerTerceroXParametros($Nombre) {
        $sql = "SELECT Identificacion, NombreCorto, Contacto, Telefono, Telefono2, Direccion, Fax,CodCiudad
                FROM `terceros` 
                WHERE NombreCorto LIKE '%" . $Nombre . "%'";

        $Tercero = new TercerosRecord();
        $Tercero = TercerosRecord::finder()->With_Ciudades()->findAllBySql($sql);

        return $Tercero;
    }

    public static function Transaccion() {

        $Finder = TercerosRecord::finder();
        $Finder->DbConnection->Active = true; //open if necessary
        $Transaction = $Finder->DbConnection->beginTransaction();

        return $Transaction;
    }

    /**
     * Suma todos los saldos de los morosos pertenecientes a un cliente y los retorna como un objeto
     * @param integer $IdTercero
     * @return <objeto> del tipo TercerosRecord
     * */
    public static function CalcularSaldoTercero($IdTercero) {
        $sql = "SELECT SUM(Saldo) AS Saldo
                FROM obligaciones
                LEFT JOIN terceros ON obligaciones.IdTercero = terceros.Identificacion
                WHERE terceros.IdTerceroPertenece =$IdTercero";

        $SaldoTercero = new TercerosRecord();
        $SaldoTercero = TercerosRecord::finder('TercerosExtRecord')->findBySql($sql);

        return $SaldoTercero->Saldo;
    }

    public static function DevIdTerceroPertenece($IdentificacionMoroso) {
        
        $sql = "SELECT IdTerceroPertenece
                FROM terceros
                WHERE Identificacion =$IdentificacionMoroso";
        $Tercero = new TercerosRecord();
        $Tercero = TercerosRecord::finder()->findBySql($sql);;

        return $Tercero->IdTerceroPertenece;
    }

}

class TercerosExtRecord extends TercerosRecord {

    public $Saldo;

}

?>