<?php

/**
 * Auto generated by prado-cli.php on 2011-03-29 05:27:04.
 * */
class TareasRecord extends TActiveRecord {

    const TABLE = 'tareas';

    public $CodTarea;
    public $CodObligacion;
    public $IdTercero;
    public $IdTerceroPertenece;
    public $CodCampana;
    public $Usuario;
    public $FhTarea;
    public $Observaciones;
    public $CodEvento;
    public $UsuarioAsigna;
    public $Cerrada;
    public $Aleatoria;
    // del tipo obligacionesRecord
    public $Obligacion;
    public $Tercero;
    public $Pertenece;
    public static $RELATIONS = array(
        'Obligacion' => array(self::BELONGS_TO, 'ObligacionesRecord', 'CodObligacion'),
        'Tercero' => array(self::BELONGS_TO, 'TercerosRecord', 'IdTercero'),
        'Pertenece' => array(self::BELONGS_TO, 'TercerosRecord', 'IdTerceroPertenece'),
    );

    public static function finder($className = __CLASS__) {
        return parent::finder($className);
    }

    public static function Transaccion() {

        $Finder = TareasRecord::finder();
        $Finder->DbConnection->Active = true; //open if necessary
        $Transaction = $Finder->DbConnection->beginTransaction();

        return $Transaction;
    }

    /**
     * @param integer $CodObli El codigo de la obligacion
     * @param integer $IdTercero La identificacion del moroso
     * @param integer $IdTerceroPertenece La identificacion de la empresa a quien pertenece la cartera
     * @param integer $CodCampana El codigo de la campaÃ±a de cobranza realizada.
     * @param string $Usuario El nombre del gestor al que se le esta asignando la obligacion
     * @param string $Observacion Comentarios acerca de la obligacion
     * @param tiyint $Aleatorio Si la tarea fue asignada aleatoriamente o no(1 o 0 respectivamente)
     * 
     * @return boolean Especifica si se asigno o no la tarea(tru o false respectivamente)
     * */
    public static function AsignarTarea($CodObligacion, $IdentificacionMoroso, $CodCampana = null, $Usuario, $UsuarioAsigna, $Observacion = '', $Aleatoria = 0, $TareasCompletas = false) {


        if (!ObligacionesRecord::DevObligacionAsignada($CodObligacion)) {

            $Tarea = new TareasRecord();

            $Tarea->CodObligacion = $CodObligacion;
            $Tarea->IdTercero = $IdentificacionMoroso;
            $Tarea->CodCampana = $CodCampana;
            $Tarea->FhTarea = date('Y-m-d H:i:s');
            $Tarea->Usuario = $Usuario;
            $Tarea->Observaciones = $Observacion;
            $Tarea->UsuarioAsigna = $UsuarioAsigna;
            $Tarea->Aleatoria = $Aleatoria;

            if ($Tarea->save()) {

                ObligacionesRecord::BloquearObligacion($CodObligacion);
//
                try {
                    if (!$TareasCompletas) {
                        $Moroso = new TercerosRecord();
                        $Moroso = TercerosRecord::finder()->findByPk($IdentificacionMoroso);
//
//                        // Si el metodo$Obligacion no fue llamado desde la asignacion completa de tareas
//
                        $arObligaciones = ObligacionesRecord::ObligacionesXMorosoXCliente($IdentificacionMoroso, $Moroso->IdTerceroPertenece);
//
                        if (Count($arObligaciones) != 0) {
                            self::AsignarTareasCompletas($arObligaciones, $CodCampana, $Usuario, $UsuarioAsigna, $Observacion, $Aleatoria);
                        }
                    }
//                    
                } catch (Exception $e) {

                    echo "<br><br>" . $e->getMessage();
                    return false;
                }

                return true;
            }
            else
                return false;
        }
        else
            return false;
    }

    /**
     * Asigna la totalidad de obligaciones de un moroso a un gestors
     * @param type $arObligaciones
     * @param type $CodCampana
     * @param type $Usuario
     * @param type $UsuarioAsigna
     * @param type $Observacion
     * @param type $Aleatoria
     * @return boolean
     */
    public function AsignarTareasCompletas($arObligaciones, $CodCampana, $Usuario, $UsuarioAsigna, $Observacion, $Aleatoria) {
        foreach ($arObligaciones as $Obligacion) {
//             echo "<br><br>".var_dump($Obligacion);
            self::AsignarTarea($Obligacion->CodObligacion, $Obligacion->IdTercero, $CodCampana, $Usuario, $UsuarioAsigna, $Observacion, $Aleatoria, true);
        }

        return true;
    }

    /**
     * Cierra una tarea
     * @param type $CodTarea
     * @param type $Usuario
     * @return boolean
     */
    public static function CerrarTarea($CodTarea, $Usuario) {
        try {
            $Tarea = new TareasRecord();
            $Tarea = TareasRecord::finder()->findByPk($CodTarea);

            if (Count($Tarea) != 0 && $Tarea->Usuario == $Usuario) {
                $Tarea->Cerrada = 1;
                $Tarea->save();

                return true;
            }
        } catch (Exception $e) {
            return false;
        }
    }

    public static function TareasMoroso($IdentificacionMoroso, $Cerradas = 0) {
        $Tareas = new TareasRecord();
        $Tareas = TareasRecord::finder()->findAllBy_IdTercero_AND_Cerrada($IdentificacionMoroso, $Cerradas);

        return $Tareas;
    }

}
class TareasExtRecord extends TareasRecord {
    public $NrObligacion;
    public $ValorFactura;
    public $ValorCuota;
    public $NombreCorto;
    public $Telefono;
    public $Telefono2;
    public $FhObligacion;
    public $FhReporte;
    public $FhUltimoPago;
    public $Saldo;
    public $FechaUltimaGestion;
    public $Cliente;
    public $ValorReporte;
    public $FechaGestion;
}




?>